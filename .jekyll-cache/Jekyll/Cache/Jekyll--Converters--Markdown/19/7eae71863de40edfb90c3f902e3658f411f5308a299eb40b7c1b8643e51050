I"iI<p>이전 포스트에 이어서 Swift API Guidelines의 이름 지정(Naming)에 대해 톺아보겠습니다. 
개발을 하면서 많이 고민하는 부분 중 하나가 바로 이름을 짓는 것입니다. 좋은 소스코드를 참고하고 영어 공부를 하는 것도 중요하겠지만,
좋은 이름을 짓기 위한 원칙, 컨벤션을 갖고있는 것 또한 매우 중요하다고 생각합니다.</p>

<hr />

<h2 id="table-of-contents">Table of Contents</h2>
<ul>
  <li><a href="../swift-api-design-guideline/#fundamentals">기본 개념(Fundamentals)</a></li>
  <li><a href="./#naming">이름 지정(Naming)</a>
    <ul>
      <li><a href="./#promote-clear-usage">명확한 사용 활성화하기(Promote Clear Usage)</a></li>
      <li><a href="./#strive-for-fluent-usage">유창하게 사용할 수 있도록 노력하기(Strive for Fluent Usage)</a></li>
      <li><a href="./#use-terminology-well">전문용어를 잘 사용하기(Use Terminology Well)</a></li>
    </ul>
  </li>
  <li><a href="../swift-api-design-guideline3/#conventions">규칙(Conventions)</a>
    <ul>
      <li><a href="../swift-api-design-guideline3/#general-conventions">일반적인 규칙(General Conventions)</a></li>
      <li><a href="../swift-api-design-guideline3/#parameters">매개 변수(Parameters)</a></li>
      <li><a href="../swift-api-design-guideline3/#argument-labels">인자 레이블(Argument Labels)</a></li>
    </ul>
  </li>
  <li><a href="../swift-api-design-guideline3/#special-instructions">특별 지침(Special Instructions)</a></li>
</ul>

<hr />

<h2 id="naming">이름 지정(Naming)</h2>

<h3 id="promote-clear-usage">명확한 사용 활성화하기(Promote Clear Usage)</h3>

<ul>
  <li>코드의 모호성을 피하기 위해서 필요한 단어는 모두 포함시켜야 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">List</span> <span class="p">{</span>
  <span class="kd">public</span> <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">remove</span><span class="p">(</span><span class="n">at</span> <span class="nv">position</span><span class="p">:</span> <span class="kt">Index</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Element</span>
<span class="p">}</span>
<span class="c1">/// 분명: x 인덱스에 있는 employee 제거</span>
<span class="n">employees</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">x</span><span class="p">)</span>
</code></pre></div>    </div>
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// 불분명: x를 제거하는가? x 인덱스의 값을 제거하는가?</span>
<span class="n">employees</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>불필요한 단어는 생략합니다. 단순히 타입을 반복하는 것은 줄이고, 최대한 매개변수의 역할을 설명하는 단어를 포함해야 합니다. 가끔은 타입의 반복이 모호성을 피하기 위해 필요할 수 있지만 역할로 표현하는 게 더 좋습니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">removeElement</span><span class="p">(</span><span class="nv">member</span><span class="p">:</span> <span class="kt">Element</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Element</span><span class="p">?</span>
<span class="n">allViews</span><span class="o">.</span><span class="nf">removeElement</span><span class="p">(</span><span class="n">cancelButton</span><span class="p">)</span> <span class="c1">// 타입의 반복</span>
</code></pre></div>    </div>
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">remove</span><span class="p">(</span><span class="nv">member</span><span class="p">:</span> <span class="kt">Element</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Element</span><span class="p">?</span>
<span class="n">allViews</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">cancelButton</span><span class="p">)</span> <span class="c1">// 반복되는 타입을 줄임으로써 더 명확해짐.</span>
</code></pre></div>    </div>
  </li>
  <li>역할로 표현되는 변수, 파라미터, 연관타입은 타입 제약사항보다 낫습니다. 이름은 타입을 나타내기보다는 그 entity의 역할, 정보를 나타내는 단어를 사용해야 합니다. 연관타입 이름 그 자체가 역할이 되는 프로토콜과 결합되어 있다면 뒤에 Type을 붙여서 충돌을 피해줍니다. 역할을 나타내는 entity를 다시 표현해야 하는 예외사항의 경우에는 타입을 나타내는 단어를 이름에 포함시켜주기도 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">string</span> <span class="o">=</span> <span class="s">"Hello"</span> <span class="c1">// string은 옳지 않아요.</span>
<span class="kd">protocol</span> <span class="kt">ViewController</span> <span class="p">{</span>
  <span class="kd">associatedtype</span> <span class="kt">ViewType</span> <span class="p">:</span> <span class="kt">View</span> <span class="c1">// Type을 굳이 반복하기 보다는 역할을 쓰는 것이 좋습니다.</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="kt">ProductionLine</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">restock</span><span class="p">(</span><span class="n">from</span> <span class="nv">widgetFactory</span><span class="p">:</span> <span class="kt">WidgetFactory</span><span class="p">)</span> <span class="c1">// widgetFactory가 명확하지 않아요.</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">greeting</span> <span class="o">=</span> <span class="s">"Hello"</span> <span class="c1">// 변수의 의미를 파악하기 쉽습니다.</span>
<span class="kd">protocol</span> <span class="kt">ViewController</span> <span class="p">{</span>
  <span class="kd">associatedtype</span> <span class="kt">ContentView</span> <span class="p">:</span> <span class="kt">View</span> <span class="c1">// View가 어떤 역할을 할지 느낌이 옵니다.</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="kt">ProductionLine</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">restock</span><span class="p">(</span><span class="n">from</span> <span class="nv">supplier</span><span class="p">:</span> <span class="kt">WidgetFactory</span><span class="p">)</span> <span class="c1">// 매개변수 하나로 restock 메서드가 무엇인지 더 알기 쉬워졌습니다.</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">Sequence</span> <span class="p">{</span>
  <span class="kd">associatedtype</span> <span class="kt">IteratorType</span> <span class="p">:</span> <span class="kt">Iterator</span> <span class="c1">// Iterator라는 프로토콜 이름 자체가 역할이기 때문에 연관타입 이름에 Type을 붙여서 충돌을 피해줍니다.</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>매개변수의 역할을 명확하게 할 수 있도록 약타입 정보를 보정해야 합니다. 사용 시점에서 타입 정보와 상황이 의도를 완전히 전달하지 못할 수 있음을 기억해야 합니다. 선언은 명확하나 사용하는 곳이 막연해질 수 있는 것입니다. 자칫 역할이 모호해질 수 있는 약타입 매개변수들은 역할을 설명하는 명사를 외부 매개변수에 포함시켜서 사용 시점에서의 명확성을 높일 수 있습니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">add</span><span class="p">(</span><span class="nv">observer</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="k">for</span> <span class="nv">keyPath</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
<span class="n">grid</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">graphics</span><span class="p">)</span> <span class="c1">// option+클릭으로 메서드를 직접 확인하지 않으면 무엇을 위해 add하는지 알기 어렵습니다.</span>
</code></pre></div>    </div>
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">addObserver</span><span class="p">(</span><span class="n">_</span> <span class="nv">observer</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="n">forKeyPath</span> <span class="nv">path</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
<span class="n">grid</span><span class="o">.</span><span class="nf">addObserver</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKeyPath</span><span class="p">:</span> <span class="n">graphics</span><span class="p">)</span> <span class="c1">// observer로 add하는 것이었군요!</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<blockquote>
  <p>🧑🏻‍💻 불필요한 단어는 제외하면서도 명확성을 위해서 필수적인 단어는 반드시 담아야한다는 게 쉽지 않은 것 같습니다. 
네이티브가 아니기에 모든 부분에서 완벽할 수는 없겠지만 항상 깔끔하게 코드를 유지할 수 있도록 신경써야겠습니다.
또, 이름을 작성할 때는 해당 부분이 사용 될 때 어떤 역할을 할까를 고민해야한다는 점은 명심해야겠습니다.</p>
</blockquote>

<p><br /></p>

<h3 id="strive-for-fluent-usage">유창하게 사용할 수 있도록 노력하기(Strive for Fluent Usage)</h3>

<ul>
  <li><strong>메서드는 파라미터를 포함해서 문법상 영어 문구 형태로 작성하세요.</strong> 봤을 때 영어 문장처럼 보일 수 있도록 자연스럽게 작성해야 합니다. 메서드에서 파라미터를 줄바꿈하는 케이스가 있는데 매개변수가 문장에서 막 중요한 역할을 하지 않을 때 그렇게 쓰기도 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 좋은 예시</span>
<span class="n">x</span><span class="o">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="nv">at</span><span class="p">:</span> <span class="n">z</span><span class="p">)</span> <span class="c1">// x에서 z에다 y를 삽입</span>
<span class="n">x</span><span class="o">.</span><span class="nf">subViews</span><span class="p">(</span><span class="nv">havingColor</span><span class="p">:</span> <span class="n">y</span><span class="p">)</span> <span class="c1">// 색상 y을 갖는 x의 subviews</span>
<span class="n">x</span><span class="o">.</span><span class="nf">capitalizingNouns</span><span class="p">()</span> <span class="c1">// x에 명사를 대문자화</span>
</code></pre></div>    </div>
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 별로인 예시</span>
<span class="n">x</span><span class="o">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="nv">position</span><span class="p">:</span> <span class="n">z</span><span class="p">)</span> <span class="c1">// position이라는 단어의 의미가 애매합니다.</span>
<span class="n">x</span><span class="o">.</span><span class="nf">subViews</span><span class="p">(</span><span class="nv">color</span><span class="p">:</span> <span class="n">y</span><span class="p">)</span> <span class="c1">// 서브뷰를 만든다는건지 가져온다는건지 명확하지 않습니다.</span>
<span class="n">x</span><span class="o">.</span><span class="nf">nounCapitalize</span><span class="p">()</span> <span class="c1">// 역시나 와닿지 않습니다.</span>
</code></pre></div>    </div>
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">AudioUnit</span><span class="o">.</span><span class="nf">instantiate</span><span class="p">(</span>
  <span class="nv">with</span><span class="p">:</span> <span class="n">description</span><span class="p">,</span> 
  <span class="nv">options</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="n">inProcess</span><span class="p">],</span> <span class="nv">completionHandler</span><span class="p">:</span> <span class="n">stopProgressBar</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>팩토리메서드의 이름은 make prefix를 사용합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">makeIterator</span><span class="p">()</span>
</code></pre></div>    </div>
  </li>
  <li><strong>이니셜라이저와 팩토리 메소드 호출은 첫 번째 인자를 포함하지 않는 문구로 구성해야 합니다.</strong> 영어 문장처럼 문법적 연속성을 만들지않고 초기화 할 매개변수를 나열합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 좋은 예시</span>
<span class="k">let</span> <span class="nv">foreground</span> <span class="o">=</span> <span class="kt">Color</span><span class="p">(</span><span class="nv">red</span><span class="p">:</span> <span class="mi">32</span><span class="p">,</span> <span class="nv">green</span><span class="p">:</span> <span class="mi">64</span><span class="p">,</span> <span class="nv">blue</span><span class="p">:</span> <span class="mi">128</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">newPart</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="nf">makeWidget</span><span class="p">(</span><span class="nv">gears</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="nv">spindles</span><span class="p">:</span> <span class="mi">14</span><span class="p">)</span>
</code></pre></div>    </div>
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 별로인 예시</span>
<span class="k">let</span> <span class="nv">foreground</span> <span class="o">=</span> <span class="kt">Color</span><span class="p">(</span><span class="nv">havingRGBValuesRed</span><span class="p">:</span> <span class="mi">32</span><span class="p">,</span> <span class="nv">green</span><span class="p">:</span> <span class="mi">64</span><span class="p">,</span> <span class="nv">andBlue</span><span class="p">:</span> <span class="mi">128</span><span class="p">)</span> <span class="c1">// 이렇게 연속성을</span>
<span class="k">let</span> <span class="nv">newPart</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="nf">makeWidget</span><span class="p">(</span><span class="nv">havingGearCount</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="nv">andSpindleCount</span><span class="p">:</span> <span class="mi">14</span><span class="p">)</span> <span class="c1">// 굳이 만들어 줄 필요가 없습니다.</span>
</code></pre></div>    </div>
  </li>
  <li><strong>사이드 이펙트에 따라 함수와 메소드 이름을 지정합니다.</strong>
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div>    </div>
  </li>
  <li>Boolean 메소드와 속성 사용은 nonmutating일 때 수신자(아래 예시에서 x, line1)에 관한 주장으로 해석해야 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="n">x</span><span class="o">.</span><span class="n">isEmpty</span><span class="p">,</span> <span class="n">line1</span><span class="o">.</span><span class="nf">intersects</span><span class="p">(</span><span class="n">line2</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>무언가를 설명하는 프로토콜은 명사로 읽어야 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="kt">Collection</span>
</code></pre></div>    </div>
  </li>
  <li>능력을 설명하는 프로토콜은 able, ible 또는 ing 접미사를 사용하여 이름을 지정해야 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="kt">Equatable</span><span class="p">,</span> <span class="kt">ProgressReporting</span>
</code></pre></div>    </div>
  </li>
  <li>다른 타입, 속성, 변수 그리고 상수의 이름은 명사로 읽어야 합니다.</li>
</ul>

<p><br /></p>

<blockquote>
  <p>🧑🏻‍💻 fdsa</p>
</blockquote>

<p><br /></p>

<h3 id="use-terminology-well">전문용어를 잘 사용하기(Use Terminology Well)</h3>
:ET