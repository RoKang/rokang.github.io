I"<p>이전 포스트에 이어서 Swift API Guidelines의 이름 지정(Naming)에 대해 톺아보겠습니다. 
개발을 하면서 많이 고민하는 부분 중 하나가 바로 이름을 짓는 것입니다. 좋은 소스코드를 참고하고 영어 공부를 하는 것도 중요하겠지만,
좋은 이름을 짓기 위한 원칙, 컨벤션을 갖고있는 것 또한 매우 중요하다고 생각합니다.</p>

<hr />

<h2 id="table-of-contents">Table of Contents</h2>
<ul>
  <li><a href="../swift-api-design-guideline/#fundamentals">기본 개념(Fundamentals)</a></li>
  <li><a href="./#naming">이름 지정(Naming)</a>
    <ul>
      <li><a href="./#promote-clear-usage">명확한 사용 활성화하기(Promote Clear Usage)</a></li>
      <li><a href="./#strive-for-fluent-usage">유창하게 사용할 수 있도록 노력하기(Strive for Fluent Usage)</a></li>
      <li><a href="./#use-terminology-well">전문용어를 잘 사용하기(Use Terminology Well)</a></li>
    </ul>
  </li>
  <li><a href="../swift-api-design-guideline3/#conventions">규칙(Conventions)</a>
    <ul>
      <li><a href="../swift-api-design-guideline3/#general-conventions">일반적인 규칙(General Conventions)</a></li>
      <li><a href="../swift-api-design-guideline3/#parameters">매개 변수(Parameters)</a></li>
      <li><a href="../swift-api-design-guideline3/#argument-labels">인자 레이블(Argument Labels)</a></li>
    </ul>
  </li>
  <li><a href="../swift-api-design-guideline3/#special-instructions">특별 지침(Special Instructions)</a></li>
</ul>

<hr />

<h2 id="naming">이름 지정(Naming)</h2>

<h3 id="promote-clear-usage">명확한 사용 활성화하기(Promote Clear Usage)</h3>
<ul>
  <li>코드의 모호성을 피하기 위해서 필요한 단어는 모두 포함시켜야 합니다.
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">List</span> <span class="p">{</span>
<span class="kd">public</span> <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">remove</span><span class="p">(</span><span class="n">at</span> <span class="nv">position</span><span class="p">:</span> <span class="kt">Index</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Element</span>
<span class="p">}</span>
 <span class="c1">// 분명: x 인덱스에 있는 employee 제거</span>
<span class="n">employees</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">x</span><span class="p">)</span>
 <span class="c1">// 불분명: x를 제거하는가? x 인덱스의 값을 제거하는가?</span>
<span class="n">employees</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>불필요한 단어는 생략합니다. 단순히 타입을 반복하는 것은 줄이고, 최대한 매개변수의 역할을 설명하는 단어를 포함해야 합니다. 
가끔은 타입의 반복이 모호성을 피하기 위해 필요할 수 있지만 역할로 표현하는 게 더 좋습니다.
```swift
public mutating func removeElement(member: Element) -&gt; Element?
allViews.removeElement(cancelButton) // 타입의 반복</li>
</ul>

<p>public mutating func remove(member: Element) -&gt; Element?
allViews.remove(cancelButton) // 반복되는 타입을 줄임으로써 더 명확해짐.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- 역할로 표현되는 변수, 파라미터, 연관타입은 타입 제약사항보다 낫습니다. 이름은 타입을 나타내기보다는 그 entity의 역할, 정보를
나타내는 단어를 사용해야 합니다. 연관타입 이름 그 자체가 역할이 되는 프로토콜과 결합되어 있다면 뒤에 Type을 붙여서 충돌을 피해줍니다.
역할을 나타내는 entity를 다시 표현해야 하는 예외사항의 경우에는 타입을 나타내는 단어를 이름에 포함시켜주기도 합니다.
```swift
var string = "Hello" // string은 옳지 않아요.
protocol ViewController {
  associatedtype ViewType : View // Type을 굳이 반복하기 보다는 역할을 쓰는 것이 좋습니다.
}
class ProductionLine {
  func restock(from widgetFactory: WidgetFactory) // widgetFactory가 명확하지 않아요.
}

var greeting = "Hello" // 변수의 의미를 파악하기 쉽습니다.
protocol ViewController {
  associatedtype ContentView : View // View가 어떤 역할을 할지 느낌이 옵니다.
}
class ProductionLine {
  func restock(from supplier: WidgetFactory) // 매개변수 하나로 restock 메서드가 무엇인지 더 알기 쉬워졌습니다.
}

protocol Sequence {
  associatedtype IteratorType : Iterator // Iterator라는 프로토콜 이름 자체가 역할이기 때문에 연관타입 이름에 Type을 붙여서 충돌을 피해줍니다.
}
</code></pre></div></div>
<ul>
  <li>매개변수의 역할을 명확하게 할 수 있도록 약타입 정보를 보정해야 합니다.
사용 시점에서 타입 정보와 상황이 의도를 완전히 전달하지 못할 수 있음을 기억해야 합니다. 
선언은 명확하나 사용하는 곳이 막연해질 수 있는 것입니다. 
자칫 역할이 모호해질 수 있는 약타입 매개변수들은 역할을 설명하는 명사를 외부 매개변수에 포함시켜서 사용 시점에서의 명확성을 높일 수 있습니다.
```swift
func add(observer: NSObject, for keyPath: String)
grid.add(self, for: graphics) // option+클릭으로 메서드를 직접 확인하지 않으면 무엇을 위해 add하는지 알기 어렵습니다.</li>
</ul>

<p>func addObserver(_ observer: NSObject, forKeyPath path: String)
grid.addObserver(self, forKeyPath: graphics) // clear
```</p>

<h3 id="strive-for-fluent-usage">유창하게 사용할 수 있도록 노력하기(Strive for Fluent Usage)</h3>
<h3 id="use-terminology-well">전문용어를 잘 사용하기(Use Terminology Well)</h3>
:ET