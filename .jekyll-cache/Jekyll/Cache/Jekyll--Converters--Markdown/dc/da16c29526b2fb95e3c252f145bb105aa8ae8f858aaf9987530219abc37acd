I"53<p>앱 개발을 할 때 JSON 데이터 처리는 기본이면서도 정말 중요합니다. 기존에는 JSON을 주먹구구식으로 핸들링하거나 <code class="highlighter-rouge">SwiftyJSON</code>을 사용했었는데, <code class="highlighter-rouge">Swift4</code>에서 새로 도입된 <code class="highlighter-rouge">Codable</code>을 알게되서 이 프로토콜을 사용하여 JSON 데이터를 더 깔끔하게 처리하는 방법을 정리하고자 합니다.</p>

<h1 id="json-예시">JSON 예시</h1>
<!-- JSON 예제 코드 -->
<noscript><pre>{
  &quot;data&quot;: {
    &quot;room&quot;: [
      {
        &quot;name&quot;: &quot;room1&quot;,
        &quot;order&quot;: 1,
        &quot;messages&quot;: [
          {
            &quot;content&quot;: &quot;Mom&quot;,
            &quot;person&quot;: &quot;Tom&quot;,
            &quot;order&quot;: 1
          },
          {
            &quot;content&quot;: &quot;I&#39;m sorry&quot;,
            &quot;person&quot;: &quot;Will&quot;,
            &quot;order&quot;: 2
          },
          {
            &quot;content&quot;: &quot;Thank you&quot;,
            &quot;person&quot;: &quot;Big brother Tom&quot;,
            &quot;order&quot;: 3
          }
        ]
      }
    ]
  }
}</pre></noscript>
<script src="https://gist.github.com/RoKang/cf87c669c296a5392395a7e1eb0f9561.js"> </script>

<h1 id="before">Before</h1>
<p>위의 예시를 바탕으로 기존에 작성했던 코드는 아래와 같습니다.
<!-- 하드하게 디코딩한 코드 --></p>
<noscript><pre>if let data = jsonString.data(using: .utf8) {
    if let decoded = try? JSONSerialization.jsonObject(with: data, options: []) {
        let dataDic = (decoded as? [String: Any])?[&quot;data&quot;] as? [String: Any] ?? [:]
        let roomArray = dataDic[&quot;room&quot;] as? [[String: Any]] ?? []

        for room in roomArray {
            print(room[&quot;name&quot;])
            print(room[&quot;order&quot;])
            
            let messages = room[&quot;messages&quot;] as? [[String: Any]] ?? []
            
            for msg in messages {
                print(msg[&quot;content&quot;])
                print(msg[&quot;person&quot;])
                print(msg[&quot;order&quot;])
            }
        }
    }
}</pre></noscript>
<script src="https://gist.github.com/RoKang/550a3febcce5421f7020a9ef5185c389.js"> </script>

<h1 id="codable">Codable</h1>
<p><code class="highlighter-rouge">Codable</code>을 적용하기 전에 이 프로토콜이 어떤 역할을 하는지 알아야 할 필요가 있습니다. Codable은 Decodable과 Encodable을 포함하는 <code class="highlighter-rouge">protocol</code>이라고 <a href="https://developer.apple.com/documentation/swift/codable" target="blank">애플 공식 문서</a>에 나와있네요. <a href="https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types" target="blank">Encoding and Decoding Custom Types</a>를 보게 되면, Swift는 데이터를 인코딩하고 디코딩하는 표준화된 접근법을 정의하고 있다는 내용이 있습니다. 표준이라는데 당연히 써줘야죠.</p>

<p>그럼 이제 Codable로 저 괴물같은 디코딩 코드를 나름대로 좀 아름답게 바꿔보도록 하겠습니다.</p>

<!-- Codable 적용한 구조체 코드 -->
<noscript><pre>struct Result: Decodable {
    var success: Bool?
    var reason: String?
    var rooms: [Room]?
    
    enum CodingKeys: String, CodingKey {
        case success, reason, rooms = &quot;room&quot;
        case data = &quot;data&quot;
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let data = try container.nestedContainer(keyedBy: CodingKeys.self, forKey: .data)
        
        success = try container.decode(Bool.self, forKey: .success)
        reason = try container.decode(String.self, forKey: .reason)
        rooms = try data.decode([Room].self, forKey: .rooms)
    }
}

struct Room: Codable {
    var name: String?
    var order: Int?
    var messages: [Message]?
    
    enum CodingKeys: String, CodingKey {
        case name, order, messages
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decode(String.self, forKey: .name)
        order = try container.decode(Int.self, forKey: .order)
        messages = try container.decode([Message].self, forKey: .messages)
    }
}

struct Message : Codable {
    var content: String?
    var person: String?
    var order: Int?
    
    enum CodingKeys: String, CodingKey {
        case content, person, order
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        content = try container.decode(String.self, forKey: .content)
        person = try container.decode(String.self, forKey: .person)
        order = try container.decode(Int.self, forKey: .order)
    }
}</pre></noscript>
<script src="https://gist.github.com/RoKang/e665070d5d6d6b873446e217e2ea8072.js"> </script>

<!-- Codable이 적용된 구조체로 디코딩하는 예제 코드 -->
<noscript><pre>let data = jsonString.data(using: .utf8) ?? Data()
if let result = try? JSONDecoder().decode(Result.self, from: data) {
    print(&quot;success : \(result.success!)&quot;)
    print(&quot;reason : \(result.reason!)\n&quot;)
    
    for room in result.rooms! {
        print(&quot;  name : \(room.name!)&quot;)
        print(&quot;  order : \(room.order!)\n&quot;)
        
        for msg in room.messages! {
            print(&quot;    content : \(msg.content!)&quot;)
            print(&quot;    person : \(msg.person!)&quot;)
            print(&quot;    order : \(msg.order!)\n&quot;)
        }
    }
}</pre></noscript>
<script src="https://gist.github.com/RoKang/5a0e1026e5313142c2db2a216bea93d3.js"> </script>

<p>코드는 더 길어졌지만 json 데이터로부터 Result, Room, Message 구조체 인스턴스를 추출해서 데이터를 더 깔끔하게 처리할 수 있게 되었습니다! 짝짝짝</p>

<p>아 참고로, 예시이다보니 print에서 인스턴스 변수를 강제 언래핑했지만, 실제 json 데이터는 nil일 수 있기 때문에 if 구문이나 guard를 사용하시는게 더 안전합니다.</p>

<p>코드를 다시 살펴보면 CodingKey라는 낯선 친구가 보입니다. 이 친구와 함께 <code class="highlighter-rouge">init(from decoder: Decoder)</code>가 어떻게 동작하는지 간단히 살펴보겠습니다.</p>

<h1 id="codingkey">CodingKey</h1>
<p><a href="https://developer.apple.com/documentation/swift/codingkey" target="blank">CodingKey</a>는 인코딩과 디코딩을 위한 키로 쓰이는 타입입니다. 코드를 다시 보시면 CodingKey 프로토콜을 채택한 CodingKeys의 case가 json 데이터의 key로 매핑되는 것을 알 수 있습니다. 예를 들어, Result의 “rooms”에는 “room” key에 해당하는 데이터가 매핑됩니다. 그럼 코드가 어떻게 동작하는지 좀 더 자세하게 살펴보겠습니다.</p>

<ol>
  <li>decode 메서드는 디코딩 될 data로부터 Result 타입의 value를 만들어줍니다.
<!-- 표준 라이브러리 코드 1 --></li>
</ol>
<noscript><pre>if let result = try? JSONDecoder().decode(Result.self, from: data)

/// decode 표준 라이브러리

/// Decodes a top-level value of the given type from the given JSON representation.
///
/// - parameter type: The type of the value to decode.
/// - parameter data: The data to decode from.
/// - returns: A value of the requested type.
/// - throws: `DecodingError.dataCorrupted` if values requested from the payload are corrupted, or if the given data is not valid JSON.
/// - throws: An error if any value throws an error during decoding.
open func decode&lt;T&gt;(_ type: T.Type, from data: Data) throws -&gt; T where T : Decodable</pre></noscript>
<script src="https://gist.github.com/RoKang/3f1252e502a98ce31801600d325a9d32.js"> </script>

<ol>
  <li>1번 코드가 Result를 초기화하는 init 코드를 실행하겠네요. decoder에 담겨있던 data로부터 container를 생성해줍니다. <code class="highlighter-rouge">CodingKeys.self</code> 타입이 data의 key와 매핑이 되지 않는다면 <code class="highlighter-rouge">DecodingError.typeMismatch</code> 에러를 던지겠네요.
<!-- 표준 라이브러리 코드 2 --></li>
</ol>
<noscript><pre>let container = try decoder.container(keyedBy: CodingKeys.self)

/// container 

/// Returns the data stored in this decoder as represented in a container
/// keyed by the given key type.
///
/// - parameter type: The key type to use for the container.
/// - returns: A keyed decoding container view into this decoder.
/// - throws: `DecodingError.typeMismatch` if the encountered stored value is
///   not a keyed container.
func container&lt;Key&gt;(keyedBy type: Key.Type) throws -&gt; KeyedDecodingContainer&lt;Key&gt; where Key : CodingKey</pre></noscript>
<script src="https://gist.github.com/RoKang/c1e77fd8d79dc5816d67cd85b08ea030.js"> </script>

<ol>
  <li>nested이기 때문에 forKey 파라미터가 추가되서 해당 키에 대한 sub container를 생성해줍니다.
<!-- 표준 라이브러리 코드 3 --></li>
</ol>
<noscript><pre>let data = try container.nestedContainer(keyedBy: CodingKeys.self, forKey: .data)

///  nestedContainer 표준 라이브러리

/// Returns the data stored for the given key as represented in a container
/// keyed by the given key type.
///
/// - parameter type: The key type to use for the container.
/// - parameter key: The key that the nested container is associated with.
/// - returns: A keyed decoding container view into `self`.
/// - throws: `DecodingError.typeMismatch` if the encountered stored value is
///   not a keyed container.
public func nestedContainer&lt;NestedKey&gt;(keyedBy type: NestedKey.Type, forKey key: KeyedDecodingContainer&lt;K&gt;.Key) throws -&gt; KeyedDecodingContainer&lt;NestedKey&gt; where NestedKey : CodingKey</pre></noscript>
<script src="https://gist.github.com/RoKang/0c1a401def1d28b496f0bf3947560525.js"> </script>

<ol>
  <li>sub container인 data 인스턴스에서 “room” key에 해당하는 데이터를 [Room] 타입의 value로 디코딩 해줍니다.
Room 타입도 구조체이기 때문에 이 과정에서 Room의 init도 실행이 되겠네요.
<!-- 표준 라이브러리 코드 4 --></li>
</ol>
<noscript><pre>rooms = try data.decode([Room].self, forKey: .rooms)

/// decode 표준 

/// Decodes a value of the given type for the given key.
///
/// - parameter type: The type of value to decode.
/// - parameter key: The key that the decoded value is associated with.
/// - returns: A value of the requested type, if present for the given key
///   and convertible to the requested type.
/// - throws: `DecodingError.typeMismatch` if the encountered encoded value
///   is not convertible to the requested type.
/// - throws: `DecodingError.keyNotFound` if `self` does not have an entry
///   for the given key.
/// - throws: `DecodingError.valueNotFound` if `self` has a null entry for
///   the given key.
public func decode&lt;T&gt;(_ type: T.Type, forKey key: KeyedDecodingContainer&lt;K&gt;.Key) throws -&gt; T where T : Decodable</pre></noscript>
<script src="https://gist.github.com/RoKang/a56af6bb733cf19bebbbf177f460d831.js"> </script>

<p>지금까지의 내용이 디코딩만 다루고 있지만, 인코딩은 JSONEncoder 클래스를 활용한 반대의 과정이니까 식은 죽 먹기 아닐까 싶네요 크크</p>

<h1 id="tip">Tip</h1>
<ul>
  <li>
    <p>바닐라 Codable도 JSONSerialization을 사용한 방법에 비해서 훨씬 편해졌지만, <a href="https://github.com/JohnSundell/Codextended" target="blank">Codextended</a>는 Codable 코드를 더 깔끔하게 만들어줍니다. Codable에 익숙해진다면 고려해 볼 만한 옵션인 것 같습니다.</p>
  </li>
  <li>
    <p>날짜 JSON 데이터를 Date 타입으로 포맷팅하는건 생각보다 귀찮은 일 입니다. 그래서 Codable에는 어떤 날짜 데이터가 <strong>특정 포맷에 맞다면 자동으로 Date 인스턴스로 디코딩 해주는 strategy(전략)</strong>이 포함되어 있습니다.<!-- JSONDecoder().dateDecodingStrategy 예제 코드 1 --><noscript>&lt;pre&gt;let formatter = DateFormatter()
formatter.dateFormat = "yyyy.MM.dd"
JSONDecoder().dateDecodingStrategy = .formatted(formatter)
JSONDecoder().dateDecodingStrategy = .iso8601
JSONDecoder().dateDecodingStrategy = .millisecondsSince1970
JSONDecoder().dateDecodingStrategy = .secondsSince1970&lt;/pre&gt;</noscript><script src="https://gist.github.com/RoKang/fa262e9d404d05cf4c7938978fbf7043.js"> </script> formatter 인스턴스를 만들어서 원하는 포맷의 데이터를 Date로 변환할 수도 있고 iso8601 옵션처럼 표준화 된 포맷을 적용할 수도 있습니다. 저는 formatted나 iso8601 옵션을 많이 활용하게 될 것 같습니다.</p>
  </li>
</ul>
:ET