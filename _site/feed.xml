<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-19T12:15:02+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">강뱅</title><subtitle>cooool</subtitle><entry><title type="html">Swift - JSON과 Codable</title><link href="http://localhost:4000/Swift-JSON-Codable/" rel="alternate" type="text/html" title="Swift - JSON과 Codable" /><published>2020-02-20T00:00:00+09:00</published><updated>2020-02-20T00:00:00+09:00</updated><id>http://localhost:4000/Swift-JSON-Codable</id><content type="html" xml:base="http://localhost:4000/Swift-JSON-Codable/">&lt;p&gt;&lt;strong&gt;Codable 프로토콜로 JSON 데이터 처리하기&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why?&lt;/h2&gt;
&lt;p&gt;새로운 API와 함께 도착한 JSON 데이터를 처리하려다 보니 잠시 뇌가 멈췄습니다.&lt;/p&gt;

&lt;p&gt;JSON 구조는 대충 이랬습니다.&lt;/p&gt;

&lt;!-- JSON 예제 코드 --&gt;
&lt;noscript&gt;&lt;pre&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;room&amp;quot;: [
      {
        &amp;quot;name&amp;quot;: &amp;quot;room1&amp;quot;,
        &amp;quot;order&amp;quot;: 1,
        &amp;quot;messages&amp;quot;: [
          {
            &amp;quot;content&amp;quot;: &amp;quot;Mom&amp;quot;,
            &amp;quot;person&amp;quot;: &amp;quot;Tom&amp;quot;,
            &amp;quot;order&amp;quot;: 1
          },
          {
            &amp;quot;content&amp;quot;: &amp;quot;I&amp;#39;m sorry&amp;quot;,
            &amp;quot;person&amp;quot;: &amp;quot;Will&amp;quot;,
            &amp;quot;order&amp;quot;: 2
          },
          {
            &amp;quot;content&amp;quot;: &amp;quot;Thank you&amp;quot;,
            &amp;quot;person&amp;quot;: &amp;quot;Big brother Tom&amp;quot;,
            &amp;quot;order&amp;quot;: 3
          }
        ]
      }
    ]
  }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RoKang/cf87c669c296a5392395a7e1eb0f9561.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;정신 차리고 원래 해왔던 것처럼 열심히 디코딩한 결과는…&lt;/p&gt;

&lt;!-- 하드하게 디코딩한 코드 --&gt;
&lt;noscript&gt;&lt;pre&gt;if let data = jsonString.data(using: .utf8) {
    if let decoded = try? JSONSerialization.jsonObject(with: data, options: []) {
        let dataDic = (decoded as? [String: Any])?[&amp;quot;data&amp;quot;] as? [String: Any] ?? [:]
        let roomArray = dataDic[&amp;quot;room&amp;quot;] as? [[String: Any]] ?? []

        for room in roomArray {
            print(room[&amp;quot;name&amp;quot;])
            print(room[&amp;quot;order&amp;quot;])
            
            let messages = room[&amp;quot;messages&amp;quot;] as? [[String: Any]] ?? []
            
            for msg in messages {
                print(msg[&amp;quot;content&amp;quot;])
                print(msg[&amp;quot;person&amp;quot;])
                print(msg[&amp;quot;order&amp;quot;])
            }
        }
    }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RoKang/550a3febcce5421f7020a9ef5185c389.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;…… 하하하&lt;/p&gt;

&lt;p&gt;개비스콘 없이는 소화하기 힘든 코드네요 껄껄. 이 코드를 그냥 둘 수는 없으니 검색을 해봐야겠습니다. 스위프트 고수 분들은 어떻게 쓰는지..&lt;/p&gt;

&lt;p&gt;아 Swift4에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; 이라는 게 생겼군요. 일단 이게 뭔지부터 좀 알아봐야겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;codable&quot;&gt;Codable?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/swift/codable&quot; target=&quot;blank&quot;&gt;Codable&lt;/a&gt;은 Decodable Encodable을 포함하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;protocol&lt;/code&gt;이라고 공식 문서에 나와있네요. &lt;a href=&quot;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&quot; target=&quot;blank&quot;&gt;Encoding and Decoding Custom Types&lt;/a&gt;를 보게 되면, Swift는 데이터를 인코딩하고 디코딩하는 표준화된 접근법을 정의하고 있다는 내용이 있습니다. 표준이라는데 당연히 써줘야죠.&lt;/p&gt;

&lt;p&gt;그럼 이제 Codable로 저 괴물같은 디코딩 코드를 나름대로 좀 아름답게 바꿔보도록 하겠습니다.&lt;/p&gt;

&lt;!-- Codable 적용한 구조체 코드 --&gt;
&lt;noscript&gt;&lt;pre&gt;struct Result: Decodable {
    var success: Bool?
    var reason: String?
    var rooms: [Room]?
    
    enum CodingKeys: String, CodingKey {
        case success, reason, rooms = &amp;quot;room&amp;quot;
        case data = &amp;quot;data&amp;quot;
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let data = try container.nestedContainer(keyedBy: CodingKeys.self, forKey: .data)
        
        success = try container.decode(Bool.self, forKey: .success)
        reason = try container.decode(String.self, forKey: .reason)
        rooms = try data.decode([Room].self, forKey: .rooms)
    }
}

struct Room: Codable {
    var name: String?
    var order: Int?
    var messages: [Message]?
    
    enum CodingKeys: String, CodingKey {
        case name, order, messages
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decode(String.self, forKey: .name)
        order = try container.decode(Int.self, forKey: .order)
        messages = try container.decode([Message].self, forKey: .messages)
    }
}

struct Message : Codable {
    var content: String?
    var person: String?
    var order: Int?
    
    enum CodingKeys: String, CodingKey {
        case content, person, order
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        content = try container.decode(String.self, forKey: .content)
        person = try container.decode(String.self, forKey: .person)
        order = try container.decode(Int.self, forKey: .order)
    }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RoKang/e665070d5d6d6b873446e217e2ea8072.js&quot;&gt; &lt;/script&gt;

&lt;!-- Codable이 적용된 구조체로 디코딩하는 예제 코드 --&gt;
&lt;noscript&gt;&lt;pre&gt;let data = jsonString.data(using: .utf8) ?? Data()
if let result = try? JSONDecoder().decode(Result.self, from: data) {
    print(&amp;quot;success : \(result.success!)&amp;quot;)
    print(&amp;quot;reason : \(result.reason!)\n&amp;quot;)
    
    for room in result.rooms! {
        print(&amp;quot;  name : \(room.name!)&amp;quot;)
        print(&amp;quot;  order : \(room.order!)\n&amp;quot;)
        
        for msg in room.messages! {
            print(&amp;quot;    content : \(msg.content!)&amp;quot;)
            print(&amp;quot;    person : \(msg.person!)&amp;quot;)
            print(&amp;quot;    order : \(msg.order!)\n&amp;quot;)
        }
    }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RoKang/5a0e1026e5313142c2db2a216bea93d3.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;코드는 더 길어졌지만 json 데이터로부터 Result, Room, Message 구조체 인스턴스를 추출해서 데이터를 더 깔끔하게 처리할 수 있게 되었습니다! 짝짝짝&lt;/p&gt;

&lt;p&gt;아 참고로, 예시이다보니 print에서 인스턴스 변수를 강제 언래핑했지만, 실제 json 데이터는 nil일 수 있기 때문에 if 구문이나 guard를 사용하시는게 더 안전합니다.&lt;/p&gt;

&lt;p&gt;코드를 다시 살펴보면 CodingKey라는 낯선 친구가 보입니다. 이 친구와 함께 &lt;code class=&quot;highlighter-rouge&quot;&gt;init(from decoder: Decoder)&lt;/code&gt;가 어떻게 동작하는지 간단히 살펴보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;codingkey&quot;&gt;CodingKey?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/swift/codingkey&quot; target=&quot;blank&quot;&gt;CodingKey&lt;/a&gt;는 인코딩과 디코딩을 위한 키로 쓰이는 타입이라고 하네요. 코드를 다시 보시면 CodingKey 프로토콜을 채택한 CodingKeys enum의 값들이 json 데이터의 key와 매핑되는 것을 알 수 있습니다. 예를 들어, Result의 rooms 데이터는 디코딩을 위해 “room” 키로 매핑되어있네요.&lt;/p&gt;

&lt;p&gt;그럼 이 코드가 어떻게 동작하는지 한번 살펴보도록 해요.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;decode 메서드는 디코딩 될 data로부터 Result 타입의 value를 만들어줍니다.
&lt;!-- 표준 라이브러리 코드 1 --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;noscript&gt;&lt;pre&gt;if let result = try? JSONDecoder().decode(Result.self, from: data)

/// decode 표준 라이브러리

/// Decodes a top-level value of the given type from the given JSON representation.
///
/// - parameter type: The type of the value to decode.
/// - parameter data: The data to decode from.
/// - returns: A value of the requested type.
/// - throws: `DecodingError.dataCorrupted` if values requested from the payload are corrupted, or if the given data is not valid JSON.
/// - throws: An error if any value throws an error during decoding.
open func decode&amp;lt;T&amp;gt;(_ type: T.Type, from data: Data) throws -&amp;gt; T where T : Decodable&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RoKang/3f1252e502a98ce31801600d325a9d32.js&quot;&gt; &lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;1번 코드가 Result를 초기화하는 init 코드를 실행하겠네요. decoder에 담겨있던 data로부터 container를 생성해줍니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys.self&lt;/code&gt; 타입이 data의 key와 매핑이 되지 않는다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;DecodingError.typeMismatch&lt;/code&gt; 에러를 던지겠네요.
&lt;!-- 표준 라이브러리 코드 2 --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;noscript&gt;&lt;pre&gt;let container = try decoder.container(keyedBy: CodingKeys.self)

/// container 

/// Returns the data stored in this decoder as represented in a container
/// keyed by the given key type.
///
/// - parameter type: The key type to use for the container.
/// - returns: A keyed decoding container view into this decoder.
/// - throws: `DecodingError.typeMismatch` if the encountered stored value is
///   not a keyed container.
func container&amp;lt;Key&amp;gt;(keyedBy type: Key.Type) throws -&amp;gt; KeyedDecodingContainer&amp;lt;Key&amp;gt; where Key : CodingKey&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RoKang/c1e77fd8d79dc5816d67cd85b08ea030.js&quot;&gt; &lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;nested이기 때문에 forKey 파라미터가 추가되서 해당 키에 대한 sub container를 생성해줍니다.
&lt;!-- 표준 라이브러리 코드 3 --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;noscript&gt;&lt;pre&gt;let data = try container.nestedContainer(keyedBy: CodingKeys.self, forKey: .data)

///  nestedContainer 표준 라이브러리

/// Returns the data stored for the given key as represented in a container
/// keyed by the given key type.
///
/// - parameter type: The key type to use for the container.
/// - parameter key: The key that the nested container is associated with.
/// - returns: A keyed decoding container view into `self`.
/// - throws: `DecodingError.typeMismatch` if the encountered stored value is
///   not a keyed container.
public func nestedContainer&amp;lt;NestedKey&amp;gt;(keyedBy type: NestedKey.Type, forKey key: KeyedDecodingContainer&amp;lt;K&amp;gt;.Key) throws -&amp;gt; KeyedDecodingContainer&amp;lt;NestedKey&amp;gt; where NestedKey : CodingKey&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RoKang/0c1a401def1d28b496f0bf3947560525.js&quot;&gt; &lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;sub container인 data 인스턴스에서 “room” key에 해당하는 데이터를 [Room] 타입의 value로 디코딩 해줍니다.
Room 타입도 구조체이기 때문에 이 과정에서 Room의 init도 실행이 되겠네요.
&lt;!-- 표준 라이브러리 코드 4 --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;noscript&gt;&lt;pre&gt;rooms = try data.decode([Room].self, forKey: .rooms)

/// decode 표준 

/// Decodes a value of the given type for the given key.
///
/// - parameter type: The type of value to decode.
/// - parameter key: The key that the decoded value is associated with.
/// - returns: A value of the requested type, if present for the given key
///   and convertible to the requested type.
/// - throws: `DecodingError.typeMismatch` if the encountered encoded value
///   is not convertible to the requested type.
/// - throws: `DecodingError.keyNotFound` if `self` does not have an entry
///   for the given key.
/// - throws: `DecodingError.valueNotFound` if `self` has a null entry for
///   the given key.
public func decode&amp;lt;T&amp;gt;(_ type: T.Type, forKey key: KeyedDecodingContainer&amp;lt;K&amp;gt;.Key) throws -&amp;gt; T where T : Decodable&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RoKang/a56af6bb733cf19bebbbf177f460d831.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;지금까지의 내용이 디코딩만 다루고 있지만, 인코딩은 JSONEncoder 클래스를 활용한 반대의 과정이니까 식은 죽 먹기 아닐까 싶네요 크크&lt;/p&gt;

&lt;h2 id=&quot;팁&quot;&gt;팁&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;🔥 바닐라 Codable도 JSONSerialization에 비해서 상당히 편해졌지만, &lt;a href=&quot;https://github.com/JohnSundell/Codextended&quot; target=&quot;blank&quot;&gt;Codextended&lt;/a&gt; 라는 오픈소스는 더 쉽게 인코딩과 디코딩을 할 수 있게 해줍니다. 깃헙의 Star 수도 1,100이고 커밋도 비교적(?) 최근이어서 Codable도 귀찮다! 더 쉽게 json을 다루고 싶다! 하신다면 유용하지 않을까 싶습니다. 저는 아직 애송이라 나중에 고려해봐야겠네요ㅋㅋ&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;📆 날짜 json data를 Date 타입으로 포맷팅하는건 귀찮지만 중요한 일이죠. 그래서 Codable에는 어떤 날짜 데이터가 특정 포맷에 맞다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;자동으로 Date 인스턴스로 디코딩&lt;/code&gt; 해주는 strategy(전략)이 포함되어 있습니다.
&lt;!-- JSONDecoder().dateDecodingStrategy 예제 코드 1 --&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;noscript&gt;&lt;pre&gt;let formatter = DateFormatter()
formatter.dateFormat = &amp;quot;yyyy.MM.dd&amp;quot;
JSONDecoder().dateDecodingStrategy = .formatted(formatter)&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RoKang/fa262e9d404d05cf4c7938978fbf7043.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;이렇게 직접 작성한 DateFormatter를 지정해서 yyyy.MM.dd 포맷의 데이터를 Date로 변환할 수도 있구요&lt;/p&gt;

&lt;!-- JSONDecoder().dateDecodingStrategy 예제 코드 2 --&gt;
&lt;noscript&gt;&lt;pre&gt;JSONDecoder().dateDecodingStrategy = .iso8601
JSONDecoder().dateDecodingStrategy = .millisecondsSince1970
JSONDecoder().dateDecodingStrategy = .secondsSince1970&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RoKang/73fad2d1c259f0d3208c6478621be5f5.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;이렇게 표준화 된 포맷을 적용할 수도 있습니다!
저는 아무래도 formatted나 iso8601을 많이 사용하지 않을까 싶네요.&lt;/p&gt;</content><author><name></name></author><category term="Swift" /><category term="iOS" /><category term="JSON" /><category term="Codable" /><summary type="html">Codable 프로토콜로 JSON 데이터 처리하기</summary></entry></feed>